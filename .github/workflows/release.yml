name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    name: Tag and publish release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      TERM: xterm-256color
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run test suite
        run: go test -race -covermode=atomic -shuffle=on -count=1 ./...

      - name: Determine next tag
        id: next_tag
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force
          latest=$(git tag --list 'v*' | sort -V | tail -n1)
          if [ -z "$latest" ]; then
            next="v0.1.0"
          else
            IFS='.' read -r major minor patch <<<"${latest#v}"
            patch=$((patch + 1))
            next="v${major}.${minor}.${patch}"
          fi
          echo "tag=$next" >> "$GITHUB_OUTPUT"

      - name: Create or update git tag
        id: create_tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ steps.next_tag.outputs.tag }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            try {
              await github.rest.git.getRef({ owner, repo, ref: `tags/${tag}` });
              core.info(`Tag ${tag} already exists.`);
              core.setOutput('created', 'false');
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
              const message = `Release ${tag}`;
              const targetSha = context.sha;
              const tagCreateResponse = await github.rest.git.createTag({
                owner,
                repo,
                tag,
                message,
                object: targetSha,
                type: 'commit',
              });
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${tag}`,
                sha: tagCreateResponse.data.sha,
              });
              core.info(`Created tag ${tag} for commit ${targetSha}`);
              core.setOutput('created', 'true');
            }

      - name: Build release binaries
        env:
          TAG_NAME: ${{ steps.next_tag.outputs.tag }}
        run: |
          set -euo pipefail
          mkdir -p dist
          platforms=( "linux:amd64" "linux:arm64" "darwin:amd64" "darwin:arm64" "windows:amd64" )
          for platform in "${platforms[@]}"; do
            IFS=: read -r goos goarch <<<"$platform"
            ext=""
            if [ "$goos" = "windows" ]; then
              ext=".exe"
            fi
            output="commitea_${goos}_${goarch}${ext}"
            echo "Building $output"
            GOOS=$goos GOARCH=$goarch CGO_ENABLED=0 \
              go build -trimpath -buildvcs=false -ldflags="-s -w -buildid=" -o "dist/$output" ./cmd/commitea
          done
          (
            cd dist
            rm -f "commitea_${TAG_NAME}_SHA256SUMS.txt"
            for file in *; do
              if [ -f "$file" ]; then
                sha256sum "$file" >> "commitea_${TAG_NAME}_SHA256SUMS.txt"
              fi
            done
          )

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: commitea-${{ steps.next_tag.outputs.tag }}
          path: dist/*

      - name: Publish GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.next_tag.outputs.tag }}
          name: ${{ steps.next_tag.outputs.tag }}
          allowUpdates: true
          replaceArtifacts: true
          generateReleaseNotes: true
          artifacts: dist/*

      - name: Summarize release
        env:
          TAG_NAME: ${{ steps.next_tag.outputs.tag }}
        run: |
          {
            echo "## Release ${TAG_NAME}"
            echo "- Created tag: ${TAG_NAME}"
            echo "- Generated assets:"
            ls -1 dist | sed 's/^/  - /'
          } >> "$GITHUB_STEP_SUMMARY"
