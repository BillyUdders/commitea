name: Go CI

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "v*"
  pull_request:

permissions:
  contents: read

jobs:
  lint:
    name: Lint and static analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Ensure modules are tidy
        run: |
          set -euo pipefail
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Check gofmt formatting
        run: |
          set -euo pipefail
          files=$(git ls-files '*.go')
          if [ -n "$files" ]; then
            unformatted=$(gofmt -l $files)
            if [ -n "$unformatted" ]; then
              echo "The following files need gofmt:" >&2
              echo "$unformatted" >&2
              exit 1
            fi
          fi

      # - name: Run golangci-lint
      #   uses: golangci/golangci-lint-action@v6
      #   with:
      #     version: latest
      #     args: --config=.golangci.yml ./...

      - name: Ensure CLI builds
        run: go build -trimpath -buildvcs=false ./cmd/commitea

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20
    env:
      TERM: xterm-256color
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run go test with race detector and coverage
        run: go test -race -covermode=atomic -coverprofile=coverage.out -shuffle=on -count=1 ./...

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
